import type { NextPage } from 'next'
import styles from '../../styles/MinerDetails.module.scss'
import { Card, Space, Tabs } from 'antd'
import QuestionTip from '../QuestionTip'
import detailFilledIcon from '../../assets/images/detail-filled2.svg'
import rankIcon from '../../assets/images/rank.svg'
import ContentDetails from '../../components/ContentDetails'
import TransactionsLineChart from '../../components/home/TransactionsLineChart'
import AuditorNode from '../../components/Account/AuditorNode'
import ValidatorNode from '../../components/Account/ValidatorNode'
import { AppleOutlined, AndroidOutlined } from '@ant-design/icons'
import useNodeDetail from '../../hooks/useNodeDetail'
import useDaliyReward from '../../hooks/useDaliyReward'
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'
import dayjs from 'dayjs'
import {
  accuracy,
  formatBalance,
  formatNodeType,
  formatTime,
} from '../../utils'
type CProps = {
  nodeFlag: any
}
const MinerDetails: NextPage<CProps> = ({ nodeFlag }: CProps) => {
  const [data, setData] = useState([])
  const router = useRouter()
  const { address } = router.query
  const { TabPane } = Tabs
  const { result } = useNodeDetail(address)
  const { result: daliyResult } = useDaliyReward({
    nodeFlag: nodeFlag,
    accountAddr: address,
    startDate: '2021-07-01 00:00:00',
    endDate: dayjs(new Date().getTime()).format('YYYY-MM-DD 23:59:59'),
  })
  useEffect(() => {
    if (Array.isArray(daliyResult?.datas) && daliyResult?.datas?.length > 0) {
      setData(daliyResult.datas)
    }
  }, [daliyResult])
  return (
    <div className={styles.MinerDetails}>
      {/* BasicInformation */}
      <div className={styles.BasicInformation}>
        <h2 className={styles.title}>
          <img src={detailFilledIcon.src} alt="detailFilledIcon"></img>
          <span>Basic Information</span>
        </h2>
        <div className={styles.box}>
          <div className={styles.box__fl}>
            <ContentDetails style={{ borderBottom: 'none' }}>
              <ContentDetails.Item
                label="Miner name:"
                tip="The name of the account set when the account was created."
                style={{ paddingLeft: '47px' }}
              >
                {result?.nodename}
              </ContentDetails.Item>
              <ContentDetails.Item
                label="Miner type:"
                tip="There are three types of miners: Advanced miner, Edge miner, and Exchange miner. Among them, Advanced miner is divided into Validator and Auditor due to the difference in the amount of deposits."
                style={{ paddingLeft: '47px' }}
              >
                {result?.registeredNodeType &&
                  formatNodeType(result?.registeredNodeType)}
              </ContentDetails.Item>
              <ContentDetails.Item
                label="Deposit (TOP):"
                tip="The deposit is the TOP tokens staked when becoming a miner. The higher the staking amount, the greater the probability of being elected."
                style={{ paddingLeft: '47px' }}
              >
                {formatBalance(accuracy(result?.nodeDeposit, 6, 6))}
              </ContentDetails.Item>
              <ContentDetails.Item
                label="Current votes:"
                tip="The number of users' votes obtained by the node, the higher the number of votes obtained, the more blocks generated by the node"
                style={{ paddingLeft: '47px' }}
              >
                {formatBalance(result?.voteAmount)}
              </ContentDetails.Item>
              <ContentDetails.Item
                label="Dividend ratio:"
                tip="The return obtained by the node is divided into two parts: the dividend for voters and the returns kept for the node itself."
                style={{ paddingLeft: '47px' }}
              >
                {(result?.dividendRatio || result?.dividendRatio === 0) ? (
                  <>
                    {result?.dividendRatio}% for voters, keep{' '}
                    {result?.dividendRatio !== ''
                      ? 100 - result?.dividendRatio
                      : ''}
                    %
                  </>
                ) : (
                  <>0</>
                )}
              </ContentDetails.Item>
              <ContentDetails.Item
                label="Cumulative returns (TOP):"
                tip="All of block generation rewards obtained by the node"
                style={{ paddingLeft: '47px' }}
              >
                {formatBalance(
                  accuracy(result?.nodeRewardInfo?.accumulated, 6, 6)
                )}
              </ContentDetails.Item>
              <ContentDetails.Item
                label="Returns to be claimed (TOP):"
                tip="The rewards obtained by nodes after the end of each period need to be actively claimed before they can be sent to the receive account."
                style={{ paddingLeft: '47px' }}
              >
                {formatBalance(
                  accuracy(result?.nodeRewardInfo?.unclaimed, 6, 6)
                )}
              </ContentDetails.Item>
              <ContentDetails.Item
                label="Created (local time):"
                tip="The time the account was created on the mainnet."
                style={{ paddingLeft: '47px' }}
              >
                {formatTime(result?.registerTime * 1000)}
              </ContentDetails.Item>
            </ContentDetails>
          </div>
          <div className={styles.box__fr}>
            <TransactionsLineChart
              tips={
                'The daily reward is the sum of the rewards received by the node as an auditor and a validator.'
              }
              xField={'dailyDate'}
              yField={'data'}
              resData={data}
              style={{
                marginTop: 0,
              }}
              type={'reward'}
              title={'The daily reward (TOP)'}
              icon={
                <img
                  src={rankIcon.src}
                  style={{ marginRight: '8px' }}
                  alt={'rankIcon'}
                ></img>
              }
            ></TransactionsLineChart>
          </div>
        </div>
      </div>
      <div className={styles.tabs}>
        {result.nodeRoleInfos &&
          result?.nodeRoleInfos.find((i: any) => {
            return i.nodeRole === 'auditor' || i.nodeRole === 'validator'
          }) && (
            <Tabs
              defaultActiveKey={result?.nodeRoleInfos[0]?.nodeRole}
              type="line"
              tabPosition={'top'}
            >
              {result?.nodeRoleInfos?.map((item: any) => {
                return (
                  <TabPane
                    tab={
                      <>
                        <span
                          style={{
                            display: 'inline-block',
                            width: '8px',
                            height: '8px',
                            borderRadius: '50%',
                            backgroundColor:
                              item.nodeState === 'election'
                                ? '#6DD400'
                                : '#F7B500',
                            marginRight: '11px',
                          }}
                        ></span>
                        <span>
                          {item.nodeRole === 'auditor'
                            ? 'Work information of auditor node'
                            : item.nodeRole === 'validator'
                            ? 'Work information of validator node'
                            : ''}
                        </span>
                      </>
                    }
                    key={item.nodeRole}
                  >
                    <div
                      style={{
                        display: item.nodeRole === 'auditor' ? 'block' : 'none',
                      }}
                    >
                      <AuditorNode
                        accountAddr={result?.accountAddr}
                        data={
                          result?.nodeRoleInfos.find((i: any) => {
                            return i.nodeRole === 'auditor'
                          }) || {}
                        }
                      ></AuditorNode>
                    </div>
                    <div
                      style={{
                        display:
                          item.nodeRole === 'validator' ? 'block' : 'none',
                      }}
                    >
                      <ValidatorNode
                        accountAddr={result?.accountAddr}
                        data={
                          result?.nodeRoleInfos.find((i: any) => {
                            return i.nodeRole === 'validator'
                          }) || {}
                        }
                      ></ValidatorNode>
                    </div>
                  </TabPane>
                )
              })}
            </Tabs>
          )}

        {result.nodeRoleInfos &&
          result?.nodeRoleInfos.find((i: any) => {
            return i.nodeRole === 'auditor' || i.nodeRole === 'validator'
          }) && (
            <div className={styles.notice}>
              <div className={styles.notice__item}>
                <span
                  style={{
                    display: 'inline-block',
                    width: '8px',
                    height: '8px',
                    borderRadius: '50%',
                    backgroundColor: '#6DD400',
                    marginRight: '11px',
                  }}
                ></span>
                <span className={styles.text}>Elected</span>
              </div>
              <div className={styles.notice__item}>
                <span
                  style={{
                    display: 'inline-block',
                    width: '8px',
                    height: '8px',
                    borderRadius: '50%',
                    backgroundColor: '#F7B500',
                    marginRight: '11px',
                  }}
                ></span>
                <span className={styles.text}>Candidate</span>
              </div>
            </div>
          )}
      </div>
    </div>
  )
}

export default MinerDetails
